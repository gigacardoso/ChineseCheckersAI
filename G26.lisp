(defun faz-tabuleiro(n)
  (defun fila(n)
    (if (= n 0)
      ()
      (cons '* (fila (1- n)))
    )
  )
  (defun ft-aux(n c)
    (if (= n c)
      ()
      (cons (fila (* 3 n)) (ft-aux (1+ n) c))
    )
  )
  (ft-aux 1 (1+ n))
)

(defun tabuleiro-poe-peca(tab simb anel posicao)
  (let ((tab2 (copy-tree tab)))
    (setf (nth posicao (nth (- anel 1) tab2)) simb)
    tab2
  )
)
				
(defun tabuleiro-poe-peca!(tab simb anel posicao)
  (setf	(nth posicao (nth (- anel 1) tab)) simb)
)
						
(defun tabuleiro-peca (tab anel posicao)
	(nth posicao (nth (- anel 1) tab))
)
	
(defun tabuleiro-aneis (tab)
	(length tab)
)

(defun anel-p (nivel anel)
  (and  (listp anel)
		    (= (* nivel 3) (length anel))
		    (dotimes (i (* nivel 3) t)
		 	    (if (not (or	(eql (nth i anel) '0)
				  	 	(eql (nth i anel) 'X)
				  	 	(eql (nth i anel) '*)))
				  	(return nil)
				  )
			  )
  )
)

(defun tabuleiro-p (tab)
  (if (listp tab)
    (progn
      (let ((aneis 0))
	      (progn (setf aneis (tabuleiro-aneis tab))
		      (and  (listp tab)			
			          (dotimes (i aneis t)
				          (if (not (anel-p (+ i 1) (nth i tab)))
					          (return-from nil)
					        )
			          )
		      )
	      )
      )
    )
    NIL
  )
)

(defun escreve-tabuleiro(tab)
  (let ((char nil)
        (aneis 0))
    (progn
      (setf aneis (tabuleiro-aneis tab))
      (dotimes (i aneis)
        (dotimes (k 3)
          (dotimes (j (+ i 1))
            (setf char (tabuleiro-peca tab (+ i 1) (+ j (* k (+ i 1)))))
						(format t "~s" char)
          )
          (dotimes (h (- aneis (+ i 1)))
            (format t " ")
          )
        )
        (format t "~%")
      )
    ) 
  )
)

(defun le-posicao ()
	(let ((anel)
        (posicao)
     		(jogada))
 		(format t "?~%")
 		(setf anel (read))
 		(setf posicao (read))
 		(setf jogada (cons anel posicao))
 		jogada
 	)
)

(defun faz-jogador-manual (aneis simb tempo)
  #'(lambda (tab)
      (let ((anel)
            (posicao)
            (jogada)
            (segunda-vez-p nil)
            (jogada-invalida-p nil))
        (loop do
          (progn
            (if (equal segunda-vez-p t)
              (progn
                (format t "Posição ocupada por outra peça... Escolha outra!~%")
                (setf segunda-vez-p nil)
              )
            )
            (if (equal jogada-invalida-p t)
              (progn
                (format t "Jogada inválida... Escolha outra!~%")
                (setf jogada-invalida-p nil)
             )
            )
            (setf jogada (le-posicao))
            (setf anel (car jogada))
            (setf posicao (cdr jogada))
            (if (or (equal (tabuleiro-peca tab anel posicao) 'X)
                    (equal (tabuleiro-peca tab anel posicao) '0))
              (setf segunda-vez-p t)
            )
            (if (or (> anel aneis)
                    (<= anel 0)
                    (>= posicao (* anel 3))
                    (< posicao 0))
              (setf jogada-invalida-p t)
            )
          )
         while (or (not (equal (tabuleiro-peca tab anel posicao) '*))
                   (equal jogada-invalida-p t))
        )
        (setf tempo 0)
        (tabuleiro-poe-peca! tab simb anel posicao)
      )
      tab
    )
)

(defun pecas-em-todos-tercos-p (aneis tab simb)
  (let ((terco1 nil)
        (terco2 nil)
        (terco3 nil))
    (dotimes (i (* 3 aneis))
      (if (equal (tabuleiro-peca tab aneis i) simb)
        (progn
          (if (< i aneis)
            (setf terco1 t)
            (progn
              (if (< i (* aneis 2))
                (setf terco2 t)
                (progn
                  (if (< i (* aneis 3))
                    (setf terco3 t)
                  )
                )
              )
            )
          )
        )
      )
    )
    (if (and (equal terco1 t)
             (equal terco2 t)
             (equal terco3 t))
      t
      nil
    )
  )
)

(defun lista-tem-elem (lista obj)
  (let ((existe nil))
    (dolist (el lista nil)
      (if (equal el obj)
        (setf existe t)
      )
    )
    existe
  )
)

(defun caminho-final-p (aneis tab simb)
  (let ((lista-visitados ())
        (terco1 nil)
        (terco2 nil)
        (terco3 nil)
        (caminho-valido nil)
        (peca-actual)
        (lista-expandidos nil))
    (dotimes (i (* 3 aneis))
      (if (equal (tabuleiro-peca tab aneis i) simb)
        (progn
          (if (< i aneis)
            (setf terco1 t)
            (progn
              (if (< i (* aneis 2))
                (setf terco2 t)
                (progn
                  (if (< i (* aneis 3))
                    (setf terco3 t)
                  )
                )
              )
            )
          )
          (setf peca-actual (cons aneis i))
          (setf lista-visitados (cons peca-actual lista-visitados))
          (loop do
            (progn
              (if (lista-tem-elem lista-expandidos peca-actual)
                (progn
                  (loop do
                    (progn
                      (setf lista-visitados (cdr lista-visitados))
                      (if (not (equal lista-visitados ()))
                        (setf peca-actual (car lista-visitados))
                      )
                    )
                   while (and (lista-tem-elem lista-expandidos peca-actual)
                              (not (equal lista-visitados ())))
                  )
                )
              )
              (if (not (equal lista-visitados ()))
                (progn
                  (setf peca-actual (car lista-visitados))
                  (if (and (< (cdr peca-actual) (car peca-actual))
                           (equal (car peca-actual) aneis))
                    (setf terco1 t)
                    (progn
                      (if (and (< (cdr peca-actual) (* (car peca-actual) 2))
                               (equal (car peca-actual) aneis))
                        (setf terco2 t)
                        (progn
                          (if (and (< (cdr peca-actual) (* (car peca-actual) 3))
                                   (equal (car peca-actual) aneis))
                            (setf terco3 t)
                          )
                        )
                      )
                    )
                  )
                )
              )
              (if (not (equal lista-visitados ()))
                (progn
                  (if (equal (cdr peca-actual) 0)
                    (progn
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) 1) simb)
                               (not (lista-tem-elem lista-expandidos (cons (car peca-actual) 1))))
                        (setf lista-visitados (cons (cons (car peca-actual) 1) lista-visitados))
                      )
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (- (* 3 (car peca-actual)) 1)) simb)
                               (not (lista-tem-elem lista-expandidos (cons (car peca-actual) (- (* 3 (car peca-actual)) 1)))))
                        (setf lista-visitados (cons (cons (car peca-actual) (- (* 3 (car peca-actual)) 1)) lista-visitados))
                      )
                    )
                  )
                  (if (equal (cdr peca-actual) (- (* 3 (car peca-actual)) 1))
                    (progn
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) 0) simb)
                               (not (lista-tem-elem lista-expandidos (cons (car peca-actual) 0))))
                        (setf lista-visitados (cons (cons (car peca-actual) 0) lista-visitados))
                      )
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (- (* 3 (car peca-actual)) 2)) simb)
                               (not (lista-tem-elem lista-expandidos (cons (car peca-actual) (- (* 3 (car peca-actual)) 2)))))
                        (setf lista-visitados (cons (cons (car peca-actual) (- (* 3 (car peca-actual)) 2)) lista-visitados))
                      )
                    )
                  )
                  (if (and (not (equal (cdr peca-actual) 0))
                           (not (equal (cdr peca-actual) (- (* 3 (car peca-actual)) 1))))
                    (progn
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (+ (cdr peca-actual) 1)) simb)
                               (not (lista-tem-elem lista-expandidos (cons (car peca-actual) (+ (cdr peca-actual) 1)))))
                        (setf lista-visitados (cons (cons (car peca-actual) (+ (cdr peca-actual) 1)) lista-visitados))
                      )
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (- (cdr peca-actual) 1)) simb)
                               (not (lista-tem-elem lista-expandidos (cons (car peca-actual) (- (cdr peca-actual) 1)))))
                        (setf lista-visitados (cons (cons (car peca-actual) (- (cdr peca-actual) 1)) lista-visitados))
                      )
                    )
                  )
                  (if (equal (car peca-actual) 1)
                        (progn
                          (if (> aneis 1)
                            (progn
                              (dotimes (j 6)
                                (if (and (equal (floor (cdr peca-actual) 1) (floor j 2))
                                         (or (equal (mod (cdr peca-actual) 1) (mod j 2))
                                             (equal (mod (cdr peca-actual) 1) (- (mod j 2) 1)))
                                         (equal (tabuleiro-peca tab 2 j) simb)
                                         (not (lista-tem-elem lista-expandidos (cons 2 j))))
                                  (setf lista-visitados (cons (cons 2 j) lista-visitados))
                                )
                                (if (and (equal (mod (+ (floor (cdr peca-actual) 1) 1) 3) (floor j 2))
                                         (equal (mod (cdr peca-actual) 1) (- 1 1))
                                         (equal (mod j 2) 0)
                                         (equal (tabuleiro-peca tab 2 j) simb)
                                         (not (lista-tem-elem lista-expandidos (cons 2 j))))
                                     (setf lista-visitados (cons (cons 2 j) lista-visitados))
                                )
                              )
                            )
                          )
                        )
                        (progn
                          (if (equal (car peca-actual) aneis)
                            (progn
                              (dotimes (k (* 3 (- aneis 1)))
                                (if (and (equal (floor k (- aneis 1)) (floor (cdr peca-actual) aneis))
                                         (or (equal (mod k (- aneis 1)) (mod (cdr peca-actual) aneis))
                                             (equal (mod k (- aneis 1)) (- (mod (cdr peca-actual) aneis) 1)))
                                         (equal (tabuleiro-peca tab (- aneis 1) k) simb)
                                         (not (lista-tem-elem lista-expandidos (cons (- aneis 1) k))))
                                  (setf lista-visitados (cons (cons (- aneis 1) k) lista-visitados))
                                )
                                (if (and (equal (mod (+ (floor k (- aneis 1)) 1) 3) (floor (cdr peca-actual) aneis))
                                         (equal (mod k (- aneis 1)) (- (- aneis 1) 1))
                                         (equal (mod (cdr peca-actual) aneis) 0)
                                         (equal (tabuleiro-peca tab (- aneis 1) k) simb)
                                         (not (lista-tem-elem lista-expandidos (cons (- aneis 1) k))))
                                     (setf lista-visitados (cons (cons (- aneis 1) k) lista-visitados))
                                )
                              )
                            )
                            (progn
                              (dotimes (l (* 3 (- (car peca-actual) 1)))
                                (if (and (equal (floor l (- (car peca-actual) 1)) (floor (cdr peca-actual) (car peca-actual)))
                                         (or (equal (mod l (- (car peca-actual) 1)) (mod (cdr peca-actual) (car peca-actual)))
                                             (equal (mod l (- (car peca-actual) 1)) (- (mod (cdr peca-actual) (car peca-actual)) 1)))
                                         (equal (tabuleiro-peca tab (- (car peca-actual) 1) l) simb)
                                         (not (lista-tem-elem lista-expandidos (cons (- (car peca-actual) 1) l))))
                                  (setf lista-visitados (cons (cons (- (car peca-actual) 1) l) lista-visitados))
                                )
                                (if (and (equal (mod (+ (floor l (- (car peca-actual) 1)) 1) 3) (floor (cdr peca-actual) (car peca-actual)))
                                         (equal (mod l (- (car peca-actual) 1)) (- (- (car peca-actual) 1) 1))
                                         (equal (mod (cdr peca-actual) (car peca-actual)) 0)
                                         (equal (tabuleiro-peca tab (- (car peca-actual) 1) l) simb)
                                         (not (lista-tem-elem lista-expandidos (cons (- (car peca-actual) 1) l))))
                                     (setf lista-visitados (cons (cons (- (car peca-actual) 1) l) lista-visitados))
                                )
                              )
                              (dotimes (m (* 3 (+ (car peca-actual) 1)))
                                (if (and (equal (floor (cdr peca-actual) (car peca-actual)) (floor m (+ (car peca-actual) 1)))
                                         (or (equal (mod (cdr peca-actual) (car peca-actual)) (mod m (+ (car peca-actual) 1)))
                                             (equal (mod (cdr peca-actual) (car peca-actual)) (- (mod m (+ (car peca-actual) 1)) 1)))
                                         (equal (tabuleiro-peca tab (+ (car peca-actual) 1) m) simb)
                                         (not (lista-tem-elem lista-expandidos (cons (+ (car peca-actual) 1) m))))
                                  (setf lista-visitados (cons (cons (+ (car peca-actual) 1) m) lista-visitados))
                                )
                                (if (and (equal (mod (+ (floor (cdr peca-actual) (car peca-actual)) 1) 3) (floor m (+ (car peca-actual) 1)))
                                         (equal (mod (cdr peca-actual) (car peca-actual)) (- (car peca-actual) 1))
                                         (equal (mod m (+ (car peca-actual) 1)) 0)
                                         (equal (tabuleiro-peca tab (+ (car peca-actual) 1) m) simb)
                                         (not (lista-tem-elem lista-expandidos (cons (+ (car peca-actual) 1) m))))
                                     (setf lista-visitados (cons (cons (+ (car peca-actual) 1) m) lista-visitados))
                                )
                              )
                            )
                          )
                        )
                      )
                (setf lista-expandidos (cons peca-actual lista-expandidos))
                (setf peca-actual (car lista-visitados))
                )
              )
            )
           while (and (not (equal lista-visitados ()))
                      (or (equal terco1 nil)
                          (equal terco2 nil)
                          (equal terco3 nil)))
          )
        )
      )
      (if (and (equal terco1 t)
               (equal terco2 t)
               (equal terco3 t))
          (setf caminho-valido t)
      )
      (when (equal caminho-valido t) (return t))
      (setf lista-visitados ())
      (setf lista-expandidos ())
      (setf terco1 nil)
      (setf terco2 nil)
      (setf terco3 nil)
    )
    (if (equal caminho-valido t)
      t
      nil
    )
  )
)

(defun jogo-continua-p (aneis tab simb)
  (let ()
    (if (pecas-em-todos-tercos-p aneis tab simb)
      (progn
        (if (caminho-final-p aneis tab simb)
          nil
          t
        )
      )
      t
    )
  )
)

(defun tabuleiro-cheio-p (tab aneis)
  (let ((ainda-tem-estrela nil))
    (dotimes (i aneis)
      (dotimes (j (* 3 (+ i 1)))
        (if (equal (tabuleiro-peca tab (+ i 1) j) '*) (setf ainda-tem-estrela t))
      )
    )
    (if (equal ainda-tem-estrela t)
      nil
      t
    )
  )
)

(defun odd-p (num1)
  (let ((resto))
    (setf resto (rem num1 2))
    (if (equal resto 1)
      t
      nil
    ) 
  )
)

(defun num-posicoes (aneis)
  (let ((contador 0))
    (dotimes (i aneis)
      (dotimes (j (* 3 (+ i 1)))
        (setf contador (+ contador 1))
      )
    )
    contador
  )
)

(defun boa-variacao-aneis (tab aneis simb)
  (let ((max)
        (peca-ocupada nil)
        (anel1 nil)
        (anel2 nil)
        (anel3 nil))
    (if (> aneis 2)
      (setf max 3)
      (setf max aneis)
    )
    (if (equal aneis 1)
      (progn
        (setf anel3 t)
        (setf anel2 t)
      )
    )
    (if (equal aneis 2)
      (setf anel3 t)
    )
    (dotimes (i max)
      (dotimes (j (* (- aneis i) 3))
        (if (equal (tabuleiro-peca tab (- aneis i) j) simb)
          (setf peca-ocupada t)
        )
        (if (and (equal peca-ocupada t)
                 (equal (- aneis i) aneis))
          (setf anel1 t)
        )
        (if (and (equal peca-ocupada t)
                 (equal (- aneis i) (- aneis 1)))
          (setf anel2 t)
        )
        (if (and (equal peca-ocupada t)
                 (equal (- aneis i) (- aneis 2)))
          (setf anel3 t)
        )
      )
      (setf peca-ocupada nil)
    )
    (if (and (equal anel1 t)
             (equal anel2 t)
             (equal anel3 t))
      t
      nil
    )
  )
)

(defun heuristica (tab aneis simb)
  (let ((peca-actual)
        (valor 0)
        (valor-retorno 0)
        (terco1 nil)
        (terco2 nil)
        (terco3 nil)
        (terco1-meio nil)
        (terco2-meio nil)
        (terco3-meio nil)
        (contador 0)
        (contador-aux 0)
        (valor-transicao-max (/ 7000 (+ (/ (num-posicoes aneis) 2) 1)))
        (lista-visitados ())
        (lista-aux ())
        (lista-expandidos ()))
    (dotimes (j aneis)
      (dotimes (i (* 3 (- aneis j)))
        (if (equal (tabuleiro-peca tab (- aneis j) i) simb)
          (progn
            (setf peca-actual (cons (- aneis j) i))
            (setf lista-visitados (cons peca-actual lista-visitados))
            (setf lista-aux (cons peca-actual lista-aux))
            (loop do
              (loop do
                (progn
                  (if (lista-tem-elem lista-expandidos peca-actual)
                    (setf lista-aux (cdr lista-aux))
                  )
                  (if (not (equal lista-aux ()))
                    (setf peca-actual (car lista-aux))
                  )
                )
               while (and (lista-tem-elem lista-expandidos peca-actual)
                          (not (equal lista-aux ())))
              )
              (if (not (equal lista-aux ()))
                (progn
                  (if (equal j 0)
                    (progn
                      (if (and (< i aneis)
                               (equal terco1 nil))
                        (progn
                          (setf terco1 t)
                          (setf terco1-meio t)
                          (setf valor (+ valor 700))
                        )
                        (progn
                          (if (and (< i (* aneis 2))
                                   (equal terco2 nil))
                            (progn
                              (setf terco2 t)
                              (setf terco2-meio t)
                              (setf valor (+ valor 700))
                            )
                            (progn
                              (if (and (< i (* aneis 3))
                                       (equal terco3 nil))
                                (progn
                                  (setf terco3 t)
                                  (setf terco3-meio t)
                                  (setf valor (+ valor 700))
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    (progn
                      (if (and (< i (- aneis j))
                               (equal terco1-meio nil))
                        (progn
                          (setf terco1-meio t)
                          (setf valor (+ valor 300))
                        )
                        (progn
                          (if (and (< i (* (- aneis j) 2))
                                   (equal terco2-meio nil))
                            (progn
                              (setf terco2-meio t)
                              (setf valor (+ valor 300))
                            )
                            (progn
                              (if (and (< i (* (- aneis j) 3))
                                       (equal terco3-meio nil))
                                (progn
                                  (setf terco3-meio t)
                                  (setf valor (+ valor 300))
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (if (and (not (equal (cdr peca-actual) 0))
                           (not (equal (cdr peca-actual) (- (* 3 (car peca-actual)) 1))))
                    (progn
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (+ (cdr peca-actual) 1)) simb)
                               (not (lista-tem-elem lista-visitados (cons (car peca-actual) (+ (cdr peca-actual) 1)))))
                        (progn
                          (setf lista-visitados (cons (cons (car peca-actual) (+ (cdr peca-actual) 1)) lista-visitados))
                          (setf lista-aux (cons (cons (car peca-actual) (+ (cdr peca-actual) 1)) lista-aux))
                          (setf contador (+ contador 1))
                          (if (equal (mod (+ (cdr peca-actual) 1) (car peca-actual)) 0)
                            (setf valor (+ valor (* valor-transicao-max (/ 6 10))))
                            (progn
                              (if (equal (car peca-actual) 1)
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                                (setf valor (+ valor (* valor-transicao-max (/ 1 10))))
                              )
                            )
                          )
                        )
                      )
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (- (cdr peca-actual) 1)) simb)
                               (not (lista-tem-elem lista-visitados (cons (car peca-actual) (- (cdr peca-actual) 1)))))
                        (progn
                          (setf lista-visitados (cons (cons (car peca-actual) (- (cdr peca-actual) 1)) lista-visitados))
                          (setf lista-aux (cons (cons (car peca-actual) (- (cdr peca-actual) 1)) lista-aux))
                          (setf contador (+ contador 1))
                          (if (equal (mod (- (cdr peca-actual) 1) (car peca-actual)) 0)
                            (setf valor (+ valor (* valor-transicao-max (/ 6 10))))
                            (progn
                              (if (equal (car peca-actual) 1)
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                                (setf valor (+ valor (* valor-transicao-max (/ 1 10))))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (if (equal (cdr peca-actual) 0)
                    (progn
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) 1) simb)
                               (not (lista-tem-elem lista-visitados (cons (car peca-actual) 1))))
                        (progn
                          (setf lista-visitados (cons (cons (car peca-actual) 1) lista-visitados))
                          (setf lista-aux (cons (cons (car peca-actual) 1) lista-aux))
                          (setf contador (+ contador 1))
                          (if (equal (mod 1 (car peca-actual)) 0)
                            (setf valor (+ valor (* valor-transicao-max (/ 6 10))))
                            (progn
                              (if (equal (car peca-actual) 1)
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                                (setf valor (+ valor (* valor-transicao-max (/ 1 10))))
                              )
                            )
                          )
                        )
                      )
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (- (* 3 (car peca-actual)) 1)) simb)
                               (not (lista-tem-elem lista-visitados (cons (car peca-actual) (- (* 3 (car peca-actual)) 1)))))
                        (progn
                          (setf lista-visitados (cons (cons (car peca-actual) (- (* 3 (car peca-actual)) 1)) lista-visitados))
                          (setf lista-aux (cons (cons (car peca-actual) (- (* 3 (car peca-actual)) 1)) lista-aux))
                          (setf contador (+ contador 1))
                          (if (equal (mod (- (* 3 (car peca-actual)) 1) (car peca-actual)) 0)
                            (setf valor (+ valor (* valor-transicao-max (/ 7 10))))
                            (progn
                              (if (equal (car peca-actual) 1)
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (if (equal (cdr peca-actual) (- (* 3 (car peca-actual)) 1))
                    (progn
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) 0) simb)
                               (not (lista-tem-elem lista-visitados (cons (car peca-actual) 0))))
                        (progn
                          (setf lista-visitados (cons (cons (car peca-actual) 0) lista-visitados))
                          (setf lista-aux (cons (cons (car peca-actual) 0) lista-aux))
                          (setf contador (+ contador 1))
                          (if (equal (mod 0 (car peca-actual)) 0)
                            (setf valor (+ valor (* valor-transicao-max (/ 7 10))))
                            (progn
                              (if (equal (car peca-actual) 1)
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                              )
                            )
                          )
                        )
                      )
                      (if (and (equal (tabuleiro-peca tab (car peca-actual) (- (* 3 (car peca-actual)) 2)) simb)
                               (not (lista-tem-elem lista-visitados (cons (car peca-actual) (- (* 3 (car peca-actual)) 2)))))
                        (progn
                          (setf lista-visitados (cons (cons (car peca-actual) (- (* 3 (car peca-actual)) 2)) lista-visitados))
                          (setf lista-aux (cons (cons (car peca-actual) (- (* 3 (car peca-actual)) 2)) lista-aux))
                          (setf contador (+ contador 1))
                          (if (equal (mod (- (* 3 (car peca-actual)) 2) (car peca-actual)) 0)
                            (setf valor (+ valor (* valor-transicao-max (/ 6 10))))
                            (progn
                              (if (equal (car peca-actual) 1)
                                (setf valor (+ valor (* valor-transicao-max (/ 3 10))))
                                (setf valor (+ valor (* valor-transicao-max (/ 1 10))))
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (if (equal (car peca-actual) 1)
                    (progn
                      (if (> aneis 1)
                        (progn
                          (dotimes (r 6)
                            (if (and (equal (floor (cdr peca-actual) 1) (floor r 2))
                                     (or (equal (mod (cdr peca-actual) 1) (mod r 2))
                                         (equal (mod (cdr peca-actual) 1) (- (mod r 2) 1)))
                                     (equal (tabuleiro-peca tab 2 r) simb)
                                     (not (lista-tem-elem lista-visitados (cons 2 r))))
                              (progn
                                (setf lista-visitados (cons (cons 2 r) lista-visitados))
                                (setf lista-aux (cons (cons 2 r) lista-aux))
                                (setf contador (+ contador 1))
                                (if (equal (mod r 2) 0)
                                  (setf valor (+ valor (* valor-transicao-max (/ 7 10))))
                                  (setf valor (+ valor (* valor-transicao-max (/ 4 10))))
                                )
                              )
                            )
                            (if (and (equal (mod (+ (floor (cdr peca-actual) 1) 1) 3) (floor r 2))
                                     (equal (mod (cdr peca-actual) 1) (- 1 1))
                                     (equal (mod r 2) 0)
                                     (equal (tabuleiro-peca tab 2 r) simb)
                                     (not (lista-tem-elem lista-visitados (cons 2 r))))
                                 (progn
                                   (setf lista-visitados (cons (cons 2 r) lista-visitados))
                                   (setf lista-aux (cons (cons 2 r) lista-aux))
                                   (setf contador (+ contador 1))
                                   (if (equal (mod r 2) 0)
                                    (setf valor (+ valor (* valor-transicao-max (/ 8 10))))
                                    (setf valor (+ valor (* valor-transicao-max (/ 5 10))))
                                   )
                                 )
                            )
                          )
                        )
                      )
                    )
                    (progn
                      (if (not (equal (car peca-actual) aneis))
                        (progn
                          (dotimes (l (* 3 (- (car peca-actual) 1)))
                            (if (and (equal (floor l (- (car peca-actual) 1)) (floor (cdr peca-actual) (car peca-actual)))
                                     (or (equal (mod l (- (car peca-actual) 1)) (mod (cdr peca-actual) (car peca-actual)))
                                         (equal (mod l (- (car peca-actual) 1)) (- (mod (cdr peca-actual) (car peca-actual)) 1)))
                                     (equal (tabuleiro-peca tab (- (car peca-actual) 1) l) simb)
                                     (not (lista-tem-elem lista-visitados (cons (- (car peca-actual) 1) l))))
                              (progn
                                (setf lista-visitados (cons (cons (- (car peca-actual) 1) l) lista-visitados))
                                (setf lista-aux (cons (cons (- (car peca-actual) 1) l) lista-aux))
                                (setf contador (+ contador 1))
                                (if (equal (mod l (- (car peca-actual) 1)) 0)
                                  (setf valor (+ valor (* valor-transicao-max (/ 7 10))))
                                  (setf valor (+ valor (* valor-transicao-max (/ 4 10))))
                                )
                              )
                            )
                            (if (and (equal (mod (+ (floor l (- (car peca-actual) 1)) 1) 3) (floor (cdr peca-actual) (car peca-actual)))
                                     (equal (mod l (- (car peca-actual) 1)) (- (- (car peca-actual) 1) 1))
                                     (equal (mod (cdr peca-actual) (car peca-actual)) 0)
                                     (equal (tabuleiro-peca tab (- (car peca-actual) 1) l) simb)
                                     (not (lista-tem-elem lista-visitados (cons (- (car peca-actual) 1) l))))
                                 (progn
                                    (setf lista-visitados (cons (cons (- (car peca-actual) 1) l) lista-visitados))
                                    (setf lista-aux (cons (cons (- (car peca-actual) 1) l) lista-aux))
                                    (setf contador (+ contador 1))
                                    (if (equal (mod l (- (car peca-actual) 1)) 0)
                                      (setf valor (+ valor (* valor-transicao-max (/ 9 10))))
                                      (setf valor (+ valor (* valor-transicao-max (/ 6 10))))
                                    )
                                 )
                            )
                          )
                          (dotimes (m (* 3 (+ (car peca-actual) 1)))
                            (if (and (equal (floor (cdr peca-actual) (car peca-actual)) (floor m (+ (car peca-actual) 1)))
                                     (or (equal (mod (cdr peca-actual) (car peca-actual)) (mod m (+ (car peca-actual) 1)))
                                         (equal (mod (cdr peca-actual) (car peca-actual)) (- (mod m (+ (car peca-actual) 1)) 1)))
                                     (equal (tabuleiro-peca tab (+ (car peca-actual) 1) m) simb)
                                     (not (lista-tem-elem lista-visitados (cons (+ (car peca-actual) 1) m))))
                              (progn
                                (setf lista-visitados (cons (cons (+ (car peca-actual) 1) m) lista-visitados))
                                (setf lista-aux (cons (cons (+ (car peca-actual) 1) m) lista-aux))
                                (setf contador (+ contador 1))
                                (if (equal (mod m (+ (car peca-actual) 1)) 0)
                                  (setf valor (+ valor (* valor-transicao-max (/ 7 10))))  
                                  (setf valor (+ valor (* valor-transicao-max (/ 5 10))))
                                )
                              )
                            )
                            (if (and (equal (mod (+ (floor (cdr peca-actual) (car peca-actual)) 1) 3) (floor m (+ (car peca-actual) 1)))
                                     (equal (mod (cdr peca-actual) (car peca-actual)) (- (car peca-actual) 1))
                                     (equal (mod m (+ (car peca-actual) 1)) 0)
                                     (equal (tabuleiro-peca tab (+ (car peca-actual) 1) m) simb)
                                     (not (lista-tem-elem lista-visitados (cons (+ (car peca-actual) 1) m))))
                                 (progn
                                   (setf lista-visitados (cons (cons (+ (car peca-actual) 1) m) lista-visitados))
                                   (setf lista-aux (cons (cons (+ (car peca-actual) 1) m) lista-aux))
                                   (setf contador (+ contador 1))
                                   (if (equal (mod m (+ (car peca-actual) 1)) 0)
                                      (setf valor (+ valor (* valor-transicao-max (/ 9 10))))  
                                      (setf valor (+ valor (* valor-transicao-max (/ 7 10))))
                                   )
                                 )
                            )
                          )
                        )
                        (progn
                          (dotimes (k (* 3 (- aneis 1)))
                            (if (and (equal (floor k (- aneis 1)) (floor (cdr peca-actual) aneis))
                                     (or (equal (mod k (- aneis 1)) (mod (cdr peca-actual) aneis))
                                         (equal (mod k (- aneis 1)) (- (mod (cdr peca-actual) aneis) 1)))
                                     (equal (tabuleiro-peca tab (- aneis 1) k) simb)
                                     (not (lista-tem-elem lista-visitados (cons (- aneis 1) k))))
                              (progn
                                (setf lista-visitados (cons (cons (- aneis 1) k) lista-visitados))
                                (setf lista-aux (cons (cons (- aneis 1) k) lista-aux))
                                (setf contador (+ contador 1))
                                (if (equal (mod k (- aneis 1)) 0)  
                                  (setf valor (+ valor (* valor-transicao-max (/ 8 10))))
                                  (setf valor (+ valor (* valor-transicao-max (/ 5 10))))
                                )
                              )
                            )
                            (if (and (equal (mod (+ (floor k (- aneis 1)) 1) 3) (floor (cdr peca-actual) aneis))
                                     (equal (mod k (- aneis 1)) (- (- aneis 1) 1))
                                     (equal (mod (cdr peca-actual) aneis) 0)
                                     (equal (tabuleiro-peca tab (- aneis 1) k) simb)
                                     (not (lista-tem-elem lista-visitados (cons (- aneis 1) k))))
                                 (progn
                                   (setf lista-visitados (cons (cons (- aneis 1) k) lista-visitados))
                                   (setf lista-aux (cons (cons (- aneis 1) k) lista-aux))
                                   (setf contador (+ contador 1))
                                   (if (equal (mod k (- aneis 1)) 0)  
                                      (setf valor (+ valor (* valor-transicao-max (/ 10 10))))
                                      (setf valor (+ valor (* valor-transicao-max (/ 8 10))))
                                   )
                                 )
                            )
                          )
                        )
                      )
                    )
                  )
                  (setf lista-expandidos (cons peca-actual lista-expandidos))
                  (setf peca-actual (car lista-aux))
                  (if (> contador-aux contador)
                    (setf contador contador-aux)
                  )
                  (setf contador-aux 0)
                )
              )
              
              
             while (not (equal lista-aux ()))
            )
            
          ) #|progn end|#
        ) #|if end|#
        (if (> contador 4)
          (setf valor (+ valor 1300))
          (progn
            (if (equal contador 3)
              (setf valor (+ valor 1100))
              (progn
                (if (equal contador 2)
                  (setf valor (+ valor 800))
                )
              )
            )
          )
        )
        (if (> valor valor-retorno)
          (setf valor-retorno valor)
        )
        (setf valor 0)
        (setf terco1 nil)
        (setf terco2 nil)
        (setf terco3 nil)
        (setf terco1-meio nil)
        (setf terco2-meio nil)
        (setf terco3-meio nil)
        (setf lista-visitados ())
        (setf lista-expandidos ())
        (setf lista-aux ())
        (setf contador 0)
      ) #|dotimes end|#
    ) #|dotimes end|#
    (if (pecas-em-todos-tercos-p aneis tab simb)
      (setf valor-retorno (+ valor-retorno 2000))
    )
    (if (boa-variacao-aneis tab aneis simb)
      (setf valor-retorno (+ valor-retorno 3000))
    )
    valor-retorno
  ) #|let end|#
) #|defun end|#

(defun minmax (tab aneis prof alpha-in beta-in prof-max tempo-lim simb simb-adversario)
  (let ((valor)
        (alpha alpha-in)
        (alpha-antes alpha-in)
        (beta beta-in)
        (jogada))
    (if (or (caminho-final-p aneis tab '0)
            (caminho-final-p aneis tab 'X)
            (equal prof prof-max)
            (tabuleiro-cheio-p tab aneis))
      (progn
        (cond ((or (caminho-final-p aneis tab '0)
                   (caminho-final-p aneis tab 'X)) (progn
                                                     (if (odd-p prof)
                                                       (setf valor 19000)
                                                       (setf valor -19000)
                                                     )
                                                   ))
              ((tabuleiro-cheio-p tab aneis) (setf valor 0))
              ((odd-p prof) (setf valor (heuristica tab aneis simb)))
              (t (setf valor (- 0 (heuristica tab aneis simb-adversario))))
        )
        valor
      )
      (progn
        (if (not (odd-p prof))
          (progn
            (dotimes (i aneis)
              (dotimes (j (* 3 aneis))
                (if (equal (tabuleiro-peca tab (- aneis i) j) '*)
                  (progn
                    (if (>= (/ (get-internal-run-time) internal-time-units-per-second) tempo-lim)
                      (return-from minmax 1234)
                    )
                    (setf alpha-antes alpha)
                    (setf alpha (max alpha (minmax (tabuleiro-poe-peca tab simb (- aneis i) j) aneis (+ prof 1) alpha beta prof-max tempo-lim simb simb-adversario)))
                    (if (not (equal alpha alpha-antes))
                      (setf jogada (cons (- aneis i) j))
                    )
                    (if (<= beta alpha)
                      (return)
                    )
                  )
                )
              )
            )
            (setf valor alpha)
            (if (equal prof 0)
              (progn jogada)
              valor
            )
          )
          (progn
            (dotimes (i aneis)
              (dotimes (j (* 3 aneis))
                (if (equal (tabuleiro-peca tab (- aneis i) j) '*)
                  (progn
                    (if (>= (/ (get-internal-run-time) internal-time-units-per-second) tempo-lim)
                      (return-from minmax 1234)
                    )
                    (setf beta (min beta (minmax (tabuleiro-poe-peca tab simb-adversario (- aneis i) j) aneis (+ prof 1) alpha beta prof-max tempo-lim simb simb-adversario)))
                    (if (<= beta alpha)
                      (return)
                    )
                  )
                )
              )
            )
            (setf valor beta)
            valor
          )
        )
      )
    )
  )
)

(defun num-posicoes-vazias (tab aneis)
  (let ((contador 0))
    (dotimes (i aneis)
      (dotimes (j (* 3 (+ i 1)))
        (if (equal (tabuleiro-peca tab (+ i 1) j) '*) (setf contador (+ contador 1)))
      )
    )
    contador
  )
)

(defun faz-jogador-automatico (aneis simb tempo)
  #'(lambda (tab)
      (let ((jogada)
            (tempo-lim)
            (possivel-jogada)
            (indice-prof 0)
            (limite-prof (num-posicoes-vazias tab aneis))
            (simb-adversario))
        (setf tempo-lim (+ (/ (get-internal-run-time) internal-time-units-per-second) tempo))
        (if (equal simb '0)
          (setf simb-adversario 'X)
          (setf simb-adversario '0)
        )
        (loop do
          (progn
            (setf indice-prof (+ indice-prof 1))
            (setf possivel-jogada (minmax tab aneis 0 -20000 20000 indice-prof tempo-lim simb simb-adversario))
            (if (not (equal possivel-jogada 1234))
              (progn
                (setf jogada possivel-jogada)
              )
            )
          )
         while (and (not (equal possivel-jogada 1234))
                    (<= indice-prof limite-prof)))
        (tabuleiro-poe-peca! tab simb (car jogada) (cdr jogada))
      )
      tab
    )
)

(defun instancia-func (aneis criador-jogador criador-adversario tempo)
  (let ((tabuleiro (faz-tabuleiro aneis))
        (jogador (funcall criador-jogador aneis '0 tempo))
        (adversario (funcall criador-adversario aneis 'X tempo))
        (instancia ())
        (tempo-interno)
        (tempo-jogador 0)
        (tempo-adversario 0)
        (empate nil))
    (loop do
      (progn
        (when (tabuleiro-cheio-p tabuleiro aneis) (progn (setf empate t) (return)))
        (setf tempo-interno (/ (get-internal-run-time) internal-time-units-per-second))
        (funcall jogador tabuleiro)
        (setf tempo-jogador (+ tempo-jogador (- (/ (get-internal-run-time) internal-time-units-per-second) tempo-interno)))
        (format t "~%")
        (escreve-tabuleiro tabuleiro)
        (if (jogo-continua-p aneis tabuleiro '0)
          (progn
            (when (tabuleiro-cheio-p tabuleiro aneis) (progn (setf empate t) (return)))
            (setf tempo-interno (/ (get-internal-run-time) internal-time-units-per-second))
            (funcall adversario tabuleiro)
            (setf tempo-adversario (+ tempo-adversario (- (/ (get-internal-run-time) internal-time-units-per-second) tempo-interno)))
            (format t "~%")
            (escreve-tabuleiro tabuleiro)
          )
        )
      )
     while (and (jogo-continua-p aneis tabuleiro 'X)
                (jogo-continua-p aneis tabuleiro '0)))
    (setf instancia (list (float tempo-jogador) (float tempo-adversario) tabuleiro))
    instancia
  )
)

(defun executa-jogo (aneis criador-jogador criador-adversario tempo)
  (let ((lista-final ())
        (instancia1 ())
        (instancia2 ()))
    (setf instancia1 (instancia-func aneis criador-jogador criador-adversario tempo))
    (setf instancia2 (instancia-func aneis criador-adversario criador-jogador tempo))
    (setf lista-final (list instancia1 instancia2))
    lista-final
  )
)
